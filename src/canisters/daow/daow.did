
type UserRegisterCommand = record {
    email: text;
    name: text;
    memo: text;
};

type RegisterUserResult = variant {
    Ok: text;
    Err: UserError;
};

type UserResult = variant {
    Ok: UserProfile;
    Err: UserError;
};

type UserError = variant {
    UserNotFound;
    UserAlreadyExists;
    UserAlreadyDisable;
};

type UserProfile = record {
    id : nat64;
    owner : principal;
    email : text;
    name : text;
    avatar_id: nat64;
    avatar_uri: text;
    biography: text;
    interests: vec text;
    memo : text;
    status : UserStatus;
    created_at : nat64;
};

type UserStatus = variant {
    Enable;
    Disable;
};

type UserEditCommand = record {
    email: text;
    name: text;
    avatar_id: nat64;
    avatar_uri: text;
    biography: text;
    interests: vec text;
    memo: text;
    status: UserStatus;
};

type BoolUserResult = variant {
    Ok: bool;
    Err: UserError;
};

type ProjectProfile = record {
    id: nat64;
    name : text;
    logo : vec nat8;
    logo_id : nat64;
    description : text;
    roadmap : vec nat8;
    roadmap_id : nat64;
    tokenomics : Tokenomics;
    team : Team;
    trust_by : TrustBy;
    capital_detail : CapitalDetail;
    owner : principal;
    owner_info : text;
    wallet_addr: text;
    contact_info: vec text;
    links: vec text;
    tags: vec text;
    memo: text;
    progress : ProgressStage;
    actual_raise: nat64;
    claimed: nat64;
    status : ProjectStatus;
    created_at : nat64;
    updated_at : nat64;
};

type Tokenomics = record {
    token : text;
    did :  text;
    symbol : text;
    total_supply : nat64;
    distribution : vec Distribution;
};

type Distribution = record {
    team : text;
    marketing : text;
};

type Team = record {
    name : text;
    position : text;
    twitter : opt text;
    picture : vec nat8;
    picture_id : nat64;
};

type TrustBy = record {
    name : text;
    link : text;
    logo : vec nat8;
    logo_id : nat64;
};

type CapitalDetail = record {
    raise : Raise;
    price_per_icp : nat64;
    release : ReleaseRule;
};

type Raise = record {
    currency : text;
    amount : nat64;
};

type ReleaseRule = record {
    method : ReleaseMethod;
    amount_per_day : nat64;
    start_date : nat64;
};

type ReleaseMethod = variant {
    Linear;
};

type ProgressStage = variant {
    Unopen;
    InProgress;
    Completed;
};

type ProjectStatus = variant {
    Pending;
    Enable;
    Disable;
};

type ProjectCreateCommand = record {
    name: text;   
};

type ProjectIdCommand = record {
    id: nat64;
};

type ProjectCreatedResult = variant {
    Ok: nat64;
    Err: ProjectError;
};

type ProjectEditCommand = record {
    id : nat64;
    name : text;
    logo : vec nat8;
    logo_id : nat64;
    description : text;
    roadmap : vec nat8;
    roadmap_id : nat64;
    tokenomics : Tokenomics;
    team : Team;
    trust_by : TrustBy;
    capital_detail : CapitalDetail;
    owner : principal;
    owner_info : text;
    wallet_addr: text;
    contact_info: vec text;
    links: vec text;
    tags: vec text;
    memo: text;
};


type BoolProjectResult = variant {
    Ok: bool;
    Err: ProjectError;
};

type ProjectResult = variant {
    Ok: ProjectProfile;
    Err: ProjectError;
};

type ProjectError = variant {
    ProjectAlreadyExists;
    ProjectNotFound;
    ProjectAlreadyCompleted;
    UserNotFound;
};

type ProjectApplyDescriptionCommand = record {
    id: nat64;
    description: text;
};

type ProjectApplyRoadmapCommand = record {
    id: nat64;
    roadmap: vec nat8;
};

type ProjectApplyTokenomicsCommand = record {
    id: nat64;
    tokenomics: Tokenomics;
};

type ProjectApplyTrustByCommand = record {
    id: nat64;
    trust_by: TrustBy;
};

type ProjectApplyTeamCommand = record {
    id: nat64;
    team: Team;
};

type ProjectApplyCapitalDetailCommand = record {
    id: nat64;
    capital_detail: CapitalDetail;
};

type ProjectPage = record {
   data: vec ProjectProfile;
   page_num: nat64;
   page_size: nat64;
   total_count: nat64
};

type PageQuery = record {
    page_size: nat64;
    page_num: nat64;
    querystring: text;
};

type ProjectPageResult = variant {
    Ok: ProjectPage;
    Err: ProjectError;
};

type ProjectProfiles = vec ProjectProfile;

type ProjectListQuery = record {
    status: text;
};

type ProjectListResult = variant {
    Ok: ProjectProfiles;
    Err: ProjectError;
};

type TransactionProfile = record {
    id: nat64;
    from_princiapl: principal;
    from: text;
    to: text;
    amount: nat64;
    block_height: nat64;
    memo: nat64;
    project_id: nat64;
    is_finalize: bool;
    created_at: nat64;
};

type TransactionCreateCommand = record {
    from: text;
    to: text;
    amount: nat64;
    memo: nat64;
    project_id: nat64;
};

type TransactionUpdateCommand = record {
    transaction_id: nat64;
    memo: nat64;
    amount: nat64;
    project_id: nat64;
    block_height: nat64;
};

type TransactionIdCommand = record {
    id: nat64;
};

type BoolTransactionResult = variant {
    Ok: bool;
    Err: TransactionError;
};

type TransactionCreatedResult = variant {
    Ok: nat64;
    Err: TransactionError;
};

type TransactionResult = variant {
    Ok: TransactionProfile;
    Err: TransactionError;
};

type TransactionError = variant {
    TransactionAlreadyExists;
    TransactionNotFound;
};

type TransactionPage = record {
   data: vec TransactionProfile;
   page_num: nat64;
   page_size: nat64;
   total_count: nat64
};

type TransactionPageResult = variant {
    Ok: TransactionPage;
    Err: TransactionError;
};

type TransactionValidCommand = record {
    block_height: nat64;
    project_id: nat64;
};

type Weights = record {
    amount_e8s: nat64;
};

type ProposalState = variant {
    // The proposal is open for voting
    Open;

    // Enough "yes" votes have been cast to accept the proposal, and it will soon be executed
    Accepted;

    // Enough "no" votes have been cast to reject the proposal, and it will not be executed
    Rejected;

    // The proposal is currently being executed
    Executing;

    // The proposal has been successfully executed
    Succeeded;

    // A failure occurred while executing the proposal
    Failed: text;
};

type ClaimProposal = record {
    id: nat64;
    proposer: principal;
    payload: ProposalPayload;
    state: ProposalState;
    votes_yes: Weights;
    votes_no: Weights;
    voters: vec principal;
    created_at: nat64;
};

type ProposalPayload = record {
    canister_id: principal;
    method: text;
    message: blob;
};

type Vote = variant {
    Yes;
    No;
};

type VoteArgs = record {
    proposal_id: nat64;
    vote: Vote;
};

type VoteResult = variant {
    Ok: ProposalState;
    Err: text;
};

type ClaimProposalGetQuery = record {
    id: nat64;
};

type ClaimProposalResult = variant {
    Ok: ClaimProposal;
    Err: ClaimError;
};

type ProposalSubmitResult = variant {
    Ok: nat64;
    Err: ClaimError;
};

type ClaimError = variant {
    ProposalNotFound;
    ProposalAlreadyExists;
    ProjectInvalid;
};

type ClaimProposalPage = record {
   data: vec ClaimProposal;
   page_num: nat64;
   page_size: nat64;
   total_count: nat64
};

type ClaimProposalPageResult = variant {
    Ok: ClaimProposalPage;
    Err: ClaimError;
};

service : {
 
    "greet": (text) -> (text) query;

    "register_user": (UserRegisterCommand) -> (RegisterUserResult);
    "edit_user" : (UserEditCommand) -> (BoolUserResult);
    "enable_user" : (principal) -> (BoolUserResult);
    "disable_user" : (principal) -> (BoolUserResult);
    "get_user" : (text) -> (BoolUserResult);
    "get_self" : () -> (UserResult);

    "create_project": (ProjectCreateCommand) -> (ProjectCreatedResult);
    "edit_project" : (ProjectEditCommand) -> (BoolProjectResult);
    "delete_projet" : (ProjectIdCommand) -> (BoolProjectResult);
    "submit_projet" : (ProjectIdCommand) -> (BoolProjectResult);
    "apply_project_description" : (ProjectApplyDescriptionCommand) -> (BoolProjectResult);
    "apply_project_roadmap" : (ProjectApplyRoadmapCommand) -> (BoolProjectResult);
    "apply_project_tokenomics" : (ProjectApplyTokenomicsCommand) -> (BoolProjectResult);
    "apply_project_trust_by" : (ProjectApplyTrustByCommand)  -> (BoolProjectResult);
    "apply_project_team" : (ProjectApplyTeamCommand) -> (BoolProjectResult);
    "apply_project_capital_detail" : (ProjectApplyCapitalDetailCommand) -> (BoolProjectResult);
    "get_project" : (ProjectIdCommand) -> (ProjectResult);
    "page_projects" : (PageQuery) -> (ProjectPageResult);
    "list_projects" : (ProjectListQuery) -> (ProjectListResult);

    "create_transaction": (TransactionCreateCommand) -> (TransactionCreatedResult);
    "update_transaction": (TransactionUpdateCommand) -> (BoolTransactionResult);
    "valid_transaction" : (TransactionValidCommand) -> (BoolTransactionResult);
    "get_transaction" : (TransactionIdCommand) -> (TransactionResult);
    "page_transactions" : (PageQuery) -> (TransactionPageResult);

    "submit_claim_proposal" : (ProposalPayload) -> (ProposalSubmitResult);
    "vote_claim_proposal" : (VoteArgs) -> (VoteResult);
    "get_claim_proposal" : (ClaimProposalGetQuery) -> (ClaimProposalResult);
    "page_claim_proposals" : (PageQuery) -> (ClaimProposalPageResult);
}